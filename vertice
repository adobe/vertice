#!/bin/bash
#
# Author: Alejandro Sanchez Acosta
#
# Copyright (c) 2018 Adobe Systems Incorporated. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

REGION=us-east-1
OPTIND=1

source config

show_help() {
  USAGE="$(basename "$0") [-h] [-v] -- Manage Jenkins jobs

where:
    -h  show this help text
    -r  rules file (rules/rule)
    -v  verbose"

  echo "$USAGE"
}

if [[ -z "${VUSER}" ]]; then
  VUSER=$(echo $CONFIG | jq .config | jq .user | tr -d '"')
fi

if [[ -z "${VTOKEN}" ]]; then
  VTOKEN=$(echo $CONFIG | jq .config | jq .token | tr -d '"')
fi

if [[ -z "${VSERVER}" ]]; then
  VSERVER=$(echo $CONFIG | jq .config | jq .server | tr -d '"')
fi

if [[ -z "${VREGION}" ]]; then
  VREGION=$(echo $CONFIG | jq .config | jq .region | tr -d '"')
fi

if [[ -z "${VENV}" ]]; then
  VENV=$(echo $CONFIG | jq .config | jq .env | tr -d '"')
fi

while getopts "h?vr:s:d" opt; do
    case "$opt" in
    h|\?)
        show_help
        exit
        ;;
    v)  VERBOSE=1
        echo "Verbose"
        echo $CONFIG | jq .
        ;;
    s)  VSERVER=$OPTARG
        ;;
    d)  DRY=true
        echo "Enabling Dry Mode"
        ;;
    r)  RFILE=$OPTARG
        source $RFILE

        if [ -e x.txt ]
        then
          rm vertice-$(date +%Y%m%d).log
        fi

        for row in $(echo "${RULES}" | jq -r '.rules[] | @base64'); do
            RULE=$(echo ${row} | base64 --decode)
            JENKINS=$(echo $RULE | jq .rule | jq -r .url | sed 's/$SERVER/'"$VSERVER"'/g' | sed 's/$REGION/'"$VENV"'/g' | sed 's/$ENV/'"$VREGION"'/g')
            PARAMETERS=$(echo $RULE | jq .rule | jq .parameters)
            CHECKS=$(echo $RULE | jq .rule | jq .checks)
            SLEEP=$(echo $RULE | jq .rule | jq -r .sleep | sed 's/$SERVER/'"$VSERVER"'/g' | sed 's/$REGION/'"$VENV"'/g' | sed 's/$ENV/'"$VREGION"'/g')
            PARAMS=""

            for param in $(echo "${RULE}" | jq -r '.rule' | jq -r '.parameters[] | @base64'); do
              PNAME=$(echo ${param} | base64 --decode | jq -r '. | keys[]')
              PVALUE=$(echo ${param} | base64 --decode | jq -r '. | values[]' | sed 's/$SERVER/'"$VSERVER"'/g' | sed 's/$REGION/'"$VREGION"'/g' | sed 's/$ENV/'"$VENV"'/g')
              PARAMS=$PARAMS"{\"name\":\"${PNAME}\", \"value\":\"${PVALUE}\"},"
            done

            PARAMS=$(echo ${PARAMS} | rev | cut -c 2- | rev)
            PARAMS=$(echo "["${PARAMS}"]")

            echo "curl -X POST ${JENKINS} --user ${VUSER}:${VTOKEN} --data-urlencode 'json={\"parameter\":${PARAMS}}'"
            echo "curl -X POST ${JENKINS} --user ${VUSER}:${VTOKEN} --data-urlencode 'json={\"parameter\":${PARAMS}}'" >> vertice-$(date +%Y%m%d).log
            echo "sleep ${SLEEP}"

            if [[ ${CHECKS} != null ]]
            then
              for check in $(echo "${RULE}" | jq -r '.rule' | jq -r '.checks[] | @base64'); do
                CHECKVALUE=$(echo ${check} | base64 --decode | jq -r '. | values[]' | sed 's/$SERVER/'"$VSERVER"'/g' | sed 's/$REGION/'"$VREGION"'/g' | sed 's/$ENV/'"$VENV"'/g')
                echo $CHECKVALUE
              done
            fi

            if [[ "$DRY" != true ]]
            then
              echo "Running Job"
              QUEUE_URL=$(curl -X POST --silent ${JENKINS} --user ${VUSER}:${VTOKEN} --data-urlencode "json={\"parameter\":${PARAMS}}" --dump-header - --output /dev/null | grep Location | awk '{print $2}' | tr -d '\r\n')

              BUILD_URL=''
              while [ ! -n "$BUILD_URL" ]; do
                BUILD_URL=$(curl --silent "${QUEUE_URL}api/json" --user "${VUSER}:${VTOKEN}" | jq -r '.lastBuild.url')
                # echo "curl --silent ${QUEUE_URL}api/json --user ${VUSER}:${VTOKEN} | jq -r '.lastBuild.url'"
                sleep 1
              done

              STATUSJOB=''
              while [[ ${STATUSJOB} != "SUCCESS" ]]; do
                STATUSJOB=$(curl --silent ${BUILD_URL}api/json --user ${VUSER}:${VTOKEN} | jq -r .result)
                sleep 10
              done

              curl --silent ${BUILD_URL}/consoleText  --user ${VUSER}:${VTOKEN}

              echo "Waiting $SLEEP seconds"
              sleep $SLEEP

              if [[ ${CHECKS} != null ]]
              then
                for check in $(echo "${RULE}" | jq -r '.rule' | jq -r '.checks[] | @base64'); do
                  CHECKVALUE=$(echo ${check} | base64 --decode | jq -r '. | values[]' | sed 's/$SERVER/'"$VSERVER"'/g' | sed 's/$REGION/'"$VREGION"'/g' | sed 's/$ENV/'"$VENV"'/g')
                  $CHECKVALUE
                done
              fi
            fi
        done
        ;;
    esac
done

shift $((OPTIND-1))
